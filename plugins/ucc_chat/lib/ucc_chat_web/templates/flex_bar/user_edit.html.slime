- user = @user
-# {{#unless canEditOrAdd}}
- labels = Enum.map UcxUcc.Accounts.list_phone_number_labels, & {String.to_atom(&1.name), &1.id}
= if not has_permission?(@current_user, "view-user-administration") do
  p.secondary-font-color= ~g(You are not authorized to view this page)
- else
  .about.clearfix
    - form_opts = [class: "edit-form user", autocomplete: :off, "data-username": user.username]
    = form_for @changeset, "#", form_opts, fn f ->
      input(type="hidden" name="flex-id" value="admin_user_info")
      input(type="hidden" name="user[id]" value="#{user.id}")
      = if user do
        h3= user.name
      - else
        h3= ~g(Add User)
      .input-line
        = label f, :name, ~g(Name)
        = text_input f, :name, autocomplete: :off
      .input-line
      = label f, :username, ~g(Username)
        = text_input f, :username, autocomplete: :off
      .input-line
        =label :email, ~g(Email)
        = text_input f, :email, autocomplete: :off, type: :email
      fieldset.phone-numbers
        = if user.phone_numbers == [] do
          = render "add_phone_number_button.html", user: user
        - else
          legend= ~g(Phone Numbers)
          = inputs_for f, :phone_numbers, [], fn fp ->
            .input-line
              = label fp, :number, ~g(Number)
              = text_input fp, :number, type: :tel, pattern: "\\d{2,11}"
            .input-line
              = label fp, :label, ~g(Label)
              = select fp, :label_id, labels
            .input-line
              button.button.danger#remove-phone-number(rebel-click="delete_phone_number" data-number-id="#{fp.data.id}" title="#{~g(Delete)}")
                i.icon-trash
                = ~g"Delete"

      = if has_permission? @current_user, "edit-other-user-password" do
        .input-line
          = label f, :password, ~g(Password)
          = password_input f, :password, autocomplete: :off
          button#randomPassword.button= ~g(Random)
        .input-line
          = label f, :password_confirmation, ~g(Password confirmation)
          = password_input f, :password_confirmation, autocomplete: :off
      = unless user do
        .input-line
          label(for="role")= ~g(Role)
          select#role
        .input-line
          label(for="joinDefaultChannels")
            input#joinDefaultChannels(type="checkbox" value="1" checked="true")
            = ~g(Join default channels)
        .input-line
          label(for="sendWelcomeEmail")
            input#sendWelcomeEmail(type="checkbox" value="1" checked="true")
            = ~g(Send welcome email)
      nav
        button.button.button-block.cancel(type="button" rebel-click="flex_form_cancel")
          span= ~g(Cancel)
        button.button.button-block.primary.save(rebel-click="flex_form_save")
          span= ~g(Save)
